/*Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character*/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int dp[505][505];
        int i,j,n=word1.size(),m=word2.size();
        for(i=1;i<=n;i++)
        {
            dp[i][0]=i;
        }
        for(j=0;j<=m;j++)
        {
            dp[0][j]=j;
        }
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=m;j++)
            {
                if(word1[i-1]==word2[j-1])
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]))+1;
                }
            }
        }
        return dp[n][m];
    }
};
